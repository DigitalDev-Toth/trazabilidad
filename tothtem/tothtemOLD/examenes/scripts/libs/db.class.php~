<?php
//Llama a el archivo de configuracion, y el archivo de lenguajes
include("db.conf.php");
include("db.lang.php");
//comienza la clase DB
class DB
{
//variables
var $tableSchema; //matriz donde queda almacenada la estructura de la tabla y sus atributos: tabla.campo=>atributos
var $tableName; //guarda el nombre de la tabla
var $relations; //matriz que almecena las tablas relacionadas
var $actualResults; //devuelve el ultimo resultado en forma de matriz asociativa
var $actualSql; // almacena el sql generado
var $additionsNames; //almacena en una matriz los nombres de los campos, de las tablas relacionadas
var $idField; //guarda el campo primario de la tabla
var $formObjectChanges; //matriz que almecena los objetos de formulario que se desean cambiar: caja de texto normal a una oculta o de contraseña
var $formObjectLinks; //matriz que almacena los links que van en los objetos de formulario.
var $linksInShow;//matriz que almacena los links en el showData.
var $controls; //matriz de booleanos para el dibujo de los controles (boton insertar, boton modificar, boton eliminar, etiquetas, alineacion, etc)
var $selectField; //variable que guarda en campo que devuelve el showData.
var $lastId; //devuelve el id del ultimo objeto insertado
var $restrictions; //mantiene restricciones en los datos de las relaciones en el formulario
var $addValuesFormObject; //le agrega valor inicial al campo de texto en el formulario
var $autocomplete; //matriz que almacena los campos autocompletables
var $checkIfExist; //matriz que almacena los campos verificables
var $dbName; //cambia la base de datos si es necesario
var $showObjectChange; //almacena los cambios en el show

	//funcion constructora, se le asigna el nombre de la tabla, y el campo principal.
	//void DB(string tablaAsignada, string campoPrincipal)
	function DB($tableNameAssigned, $id=NULL, $db=NULL)
	{
		$this->idField = $id;
		$this->tableName = $tableNameAssigned;
		$this->dbName = $db;
		$conn = $this->connection();
		$this->tableSchema = $this->makeSchema(pg_meta_data($conn, $this->tableName), $this->tableName);
	}
	//funcion que convierte la matriz devuelta por pg_meta_data desde nombre=>atributos a tabla.nombre=>atributos (esto es para tener en el mismo esquema mas de una tabla)
	private function makeSchema($schema, $tableName)
	{
		$sql="SELECT table_name, column_name, data_type, udt_name, is_nullable, character_maximum_length FROM information_schema.columns WHERE table_name='$tableName'";
		$conn = $this->connection();
		$result = pg_query($conn, $sql);
		$rows = pg_fetch_assoc($result);
		do
		{
			$field = $rows['column_name'];
			$type = $rows['udt_name'];
			$len = $rows['character_maximum_length'];
			$isNull = $rows['is_nullable'];
			$newSchema["$tableName.$field"] = array('type'=>$type, 'len'=>$len, 'isNull'=>$isNull);
		} while ($rows = pg_fetch_assoc($result));
		
		return $newSchema;
	}
	//funcion que borra del esquema ($tableSchema) el o los campos deseados.
	function exceptions($exceptions)
	{
		foreach ($exceptions as $exception)
		{
			foreach ($this->tableSchema as $field=>$attrs)
			{
				$tablePath = $this->tableName.".".$exception;
				if ($field == $tablePath) { unset($this->tableSchema[$field]); }
			}
		}
	}
	//funcion que agrega un campo tonto (que no hace nada) especial para colcar valores que no se guardan en la base de datos.
	function fooAdditions($name, $attrs=NULL)
	{
		$this->tableSchema[$name] = $attrs;
		$this->tableSchema[$name]['type'] = "foo";
	}
	//funcion que agrega un nuevo campo de tablas relacionadas en la matriz del esquema
	function additions($table, $additions)
	{
		if($table != $this->tableName)
		{
			$conn = $this->connection();
			$relation = $this->makeSchema(pg_meta_data($conn, $table), $table);
			foreach ($additions as $addition=>$name)
			{
				foreach ($relation as $field=>$attrs)
				{
					$tablePath = $table.".".$addition;
					if ($field == $tablePath)
					{
						$this->tableSchema[$tablePath] = $attrs;
						$this->additionsNames[$tablePath] = $name;
					}
				}
			}
		}
		else
		{
			foreach ($additions as $addition=>$name)
			{
				$tablePath = $addition;
				$this->tableSchema[$tablePath] = array('type'=>'numeric');
				$this->additionsNames[$tablePath] = $name;
			}
		}
	}
	//funcion que le pasa los parametros a la variable que almecena las relaciones
	function relation($tableLinked, $thisField, $fieldLinked, $labelFieldLinked=NULL, $otherItems=NULL, $where=NULL)
	{
		$id = count($this->relations)+1;
		$this->relations[] = array(
					"id"=>$id,
					"thisTable"=>$this->tableName, 
					"thisField"=>$thisField, 
					"tableLinked"=>$tableLinked, 
					"fieldLinked"=>$fieldLinked, 
					"labelFieldLinked"=>$labelFieldLinked);
		return $id;
	}
	function reOrder($field, $index)
	{
		foreach($this->tableSchema as $value=>$attrs)
		{
			if($value==$field)
			{
				$item = $attrs;
			}
		}
		$i=0;
		$newTableSchema=NULL;
		foreach($this->tableSchema as $value=>$attrs)
		{
			if($i==$index)
			{
				$newTableSchema[$field] = $item;
			}
			if($value!=$field)
			{
				$newTableSchema[$value] = $attrs;
			}
			$i++;
		}
		$this->tableSchema = $newTableSchema;
	}
	//Funcion que realiza la coneccion a postgres
	//connect connection(void)
	private function connection()
	{
		//coloca en una variable los parametros de la configuracion
		global $hostname, $port, $dbname, $username, $password;
		if($this->dbName!=NULL)	$dbname = $this->dbName;		
		$params = "host=$hostname port=$port dbname=$dbname user=$username password=$password";
		$conn = pg_connect($params);
		return $conn;
	}
	//funcion que realiza un select a los campos que estan en ese momento en el esquema. si existe una relacion hace el vinculo a nivel sql. devuelve   		  un arreglo con los registros

	//array function select(array condiciones=NULL, array ordenamiento=NULL, int limiteFinal=NULL, int limiteInicial=NULL)
	function select($wheres=NULL, $orders=NULL, $groups=NULL, $limit=NULL, $offset=NULL)
	{
		if (is_array($this->relations)) //si existe un objeto en la matriz de relaciones
		{
			foreach ($this->relations as $object)//recorre las relaciones
			{
				$thisTable = $object['thisTable'];
				$thisField = $object['thisField'];
				$tableLinked = $object['tableLinked'];
				$fieldLinked = $object['fieldLinked'];
				$leftJoins = $leftJoins." LEFT JOIN $tableLinked on $thisTable.$thisField=$tableLinked.$fieldLinked";		
			}
		}
		$i = 0;
		foreach ($this->tableSchema as $field=>$attrs)//recorre el esquema
		{
			if (is_array($this->additionsNames))//si existen adiciones
			{
				foreach ($this->additionsNames as $table=>$name)//recorre las adiciones
				{
					if ($field == $table) { $field = $field." as ".$name; }
				}
			}
			if ($i == 0) { $comma = ""; }
			else { $comma = ", "; }
			$fields = $fields.$comma.$field;
			$i+=1;
			
		}
		if(is_array($wheres))
		{
			$i = 0;
			foreach ($wheres as $where=>$condition)
			{
				if ($i == 0) { $and = " WHERE "; }
				else
				{
					if($where==$lastWhere) { $and=" OR"; }
					else { $and = " AND"; }
				}
				if (strstr($condition, "%"))
				{
					$equal = " LIKE ";
				}
				else
				{
					if($where!="") { $equal = "="; }
    					 else{ $equal=""; }
				}
				$sqlWheres = $sqlWheres.$and." $where$equal$condition";
				$i+=1;
				$lastWhere = $where;
			}
		}
		if(is_array($orders))
		{
			$i = 0;
			foreach ($orders as $order)
			{
				if ($i == 0) { $comma = " ORDER BY "; }
				else { $comma = ", "; }
				$sqlOrders = $sqlOrders.$comma.$order;
				$i+=1;
			}
		}
		if(is_array($groups))
		{
			$i = 0;
			foreach ($groups as $group)
			{
				if ($i == 0) { $comma = " GROUP BY "; }
				else { $comma = ", "; }
				$sqlGroups = $sqlGroups.$comma.$group;
				$i+=1;
			}
		}
		if ($limit != NULL)
		{
			$sqlLimit = " LIMIT $limit";
			if ($offset != NULL)
			{
				$sqlOffset = " OFFSET $offset";
			}
		}
		$conn = $this->connection();
		$sql = "SELECT $fields FROM $this->tableName $leftJoins$sqlWheres$sqlOrders$sqlLimit$sqlOffset";
		//echo $sql;
		$this->actualSql = $sql;
		$this->actualResults = pg_query($conn, $sql);
		return pg_fetch_assoc($this->actualResults);
	}
	//funcion que mira si existen remplazo de nombres en las tablas y los campos de esta.
	//string getLenguaje(string texto)
	private function getLenguaje($text)
	{
		global $languaje;
		$word = htmlentities($languaje[$this->tableName][$text]);
		if ($word == "") { return $text; }
		else { return $word; }
	}
	//funcion que muestra (en una tabla) los datos que estan en el esquema, se le pasa como parametro el resultado asociativo de los registros (como el resultado de la funcion select)
	//void showData(array resultado, boolean controles)
	function showData($result, $showControls = TRUE)
	{
		if ($result != NULL)
		{
			$html= '<table id="showData" class="showData" align="center" cellspacing="0" cellpadding="0" border="0">';
			$html.= '<thead>';
			$html.= '<tr>';
			if ($showControls == TRUE) { $html.= '<th></th>'; } //si es true construye objetos de formulario
			foreach ($result as $field=>$data) //recorre el resultado y contruye las cabeceras de la tabla (nombre de los campos)
			{
				$html.= '<th bgcolor:"black">';
				$html.= $this->getLenguaje($field);
				$html.= '</th>';
			}
			if(isset($_GET['selectOne']) or isset($_GET['selectMany']))
			{
				if(isset($_GET['selectOne']))
				{
					$html.= '<th>';
					$html.= "selec.";
					$html.= '</th>';
				}
			}
			else
			{
				if (is_array($this->linksInShow)) //agega los links
				{
					foreach ($this->linksInShow as $name=>$attrs) //recorre la matriz de links
					{
						if($attrs['title']==NULL)
						{
							$title = $name;
						}
						else
						{
							$title = $attrs['title'];
						}
						$html.= '<th>';
						$html.= $this->getLenguaje($title);
						$html.= '</th>';
					}
				}
			}
			$html.= '</thead>';
			$html.= '<tbody>';
			do //recorre el resultado con los datos de cada campo.
			{
				$html.= '<tr class="odd">';
				if ($showControls == TRUE) 
				{
					if(isset($_GET['data'])) 
					{
						$data = $_GET['data'];
						$exp = explode(",", $data);
						if(in_array($result[$this->idField], $exp)) { $checked = "checked"; }
						else $checked = "";
					}
					$html.= '<td width="20"><input type="checkbox" name="checkbox[]" value="'.$result[$this->idField].'" '.$checked.' /></td>';  //si es true construye objetos de formulario
					
				}
				foreach ($result as $field=>$data)
				{
					$objectToChange=NULL;
					if($this->showObjectChange[$field])
					{
						foreach($this->showObjectChange[$field] as $id=>$item)
						{
							$logic=$item['logic'];
							$compare=$item['compare'];
							$object=$item['object'];
							$attrib=$item['attrib'];
							if($logic=='==')
							{
								if($result[$field]==$compare)
								{
									$objectToChange=$object;
									$attrib=$attrib;
								}
							}
							elseif($logic=='!=')
							{
								if($result[$field]!=$compare)
								{
									$objectToChange=$object;
									$attrib=$attrib;
								}
							}
							elseif($logic=='<=')
							{
								if($result[$field]<=$compare)
								{
									$objectToChange=$object;
									$attrib=$attrib;
								}
							}
							elseif($logic=='>=')
							{
								if($result[$field]>=$compare)
								{
									$objectToChange=$object;
									$attrib=$attrib;
								}
							}
							elseif($logic=='<')14
							{
								if($result[$field]<$compare)
								{
									$objectToChange=$object;
									$attrib=$attrib;
								}
							}
							elseif($logic=='>')
							{
								if($result[$field]>$compare)
								{
									$objectToChange=$object;
									$attrib=$attrib;
								}
							}
							elseif($logic=='have')
							{
								if(strstr($result[$field], $compare))
								{
									$objectToChange=$object;
									$attrib=$attrib;
								}
							}
							if($objectToChange)
							{
								if($objectToChange=="addRigthText") { $addRigthText=$attrib; }
								if($objectToChange=="addRigthImage") { $addRigthImage='<img align="center" src="'.$attrib.'" border="0" />'; }
								if($objectToChange=="replaceWithImage") { $replaceWithImage=str_replace($compare, '<img align="center" src="'.$attrib.'" border="0" />', $result[$field]); $result[$field]=$replaceWithImage; }
								if($objectToChange=="replaceWithText") { $replaceWithText=str_replace($compare, $attrib, $result[$field]); $result[$field]=$replaceWithText; }
								//break;
							}
						}
					}
					else
					{
						$addRigthText="";
						$addRigthImage="";
						$replaceWithImage="";
						$replaceWithText="";
					}
					if($replaceWithImage) { $value=$replaceWithImage; }
					elseif($replaceWithText) { $value=$replaceWithText; }
					else { $value=$result[$field]; }
					$html.= "<td>";
					$html.= strip_tags($value).$addRigthImage.$addRigthText;
					$html.= '</td>';
				}
				if(isset($_GET['selectOne']) or isset($_GET['selectMany']))
				{
					if(isset($_GET['selectOne']))
					{
						if($this->selectField == NULL) { $this->selectField = $this->idField; }
						$val="";
						$i=0;
						$exps = explode(",", $_GET['selectOne']);
						foreach($exps as $exp)
						{
							
							$obj = explode("->", $exp);
							$val = $val.'selectOne('.$i.",'".$result[$obj[1]]."'".')'.";";
							$i++;
						}
						$html.= '<td><a href="#" onclick="'.$val.'window.close();"><img src="../images/ok.png" border="0"></a></td>';
					}
				}
				else
				{
					if (is_array($this->linksInShow)) //agega los links
					{
						foreach ($this->linksInShow as $name=>$attrs) //recorre la matriz de links
						{
							if($attrs['image']!=NULL) { $object = '<div align="center"><img src="'.$attrs['image'].'" alt="'.$name.'" border="0" align="center" /></div>'; }
							else { $object = $name; }
							$attrs['others']=ereg_replace("###", $name.'='.$result[$this->idField], $attrs['others']);
							if(strstr($attrs['link'], "?")) { $equal = "&"; }
							else { $equal = "?"; }
							$html.= '<td align="center"><a href="'.$attrs['link'].$equal.$name.'='.$result[$this->idField].'" '.$attrs['others'].' >'.$object.'</a></td>'; 
						}
					}
				}
				$html.= '</tr>';
			} while ($result = pg_fetch_assoc($this->actualResults));
			$html.= '</tbody>';
		}
		$html.= '<INPUT TYPE="hidden" NAME="actValue">';
		$html.= '</table>';
		$html.= '</form>';
		return $html;
	}

	//funcion que muestra la tabla con los examenes
	

	//funcion que muestra el formulario para la inclusion o para la modificacion de un registro. si el parametro es nulo, es para insertar, de lo contrario es para modificar.
	//void showForm(string datoParaModificar= NULL)
	function showForm($data=NULL)
	{
		$this->insertJavaForm();
		echo '<form id="form_main" name="'.$this->tableName.'" method="post" enctype="multipart/form-data" onSubmit="return false;">';
		echo '<table id="showForm" align="center">';
		foreach ($this->tableSchema as $field=>$attrs)//recorre el esquema
		{
			$thisTable = "";
			$thisField = "";
			$tableLinked = "";
			$fieldLinked = "";
			$labelFieldLinked = "";
			$label = "";
			$simpleField = explode(".", $field); //divide el campo (tabla.campo)
			if ($data == NULL) { $value = ""; }
			else { $value = $data[$simpleField[1]]; } //pasa a value el nombre del campo (sin tabla)
			if(isset($_REQUEST[$simpleField[1]])) { $value = $_REQUEST[$simpleField[1]];}
			//$value = htmlentities($value);
			$flag = FALSE;
			$restrictionWhere = NULL;
			if (is_array($this->relations)) //si existe una relacion entonces...
			{
				foreach ($this->relations as $object) //recorre las relaciones para ver si existe una igualdad de nombre con el campo en el esquema.
				{
					$thisTable = $object['thisTable'];
					$thisField = $object['thisField'];
					$tableLinked = $object['tableLinked'];
					$fieldLinked = $object['fieldLinked'];
					$labelFieldLinked = $object['labelFieldLinked'];
					$relationId = $object['id'];
					if($labelFieldLinked != NULL){ $label = NULL; }
					else { $label = array($labelFieldLinked); }
					if ($thisTable.".".$thisField == $field) //si existe la igualdad la bandera es verdadera.
					{
						$flag = TRUE;
						if($this->restrictions[$relationId]!=NULL) { $restrictionWhere=$this->restrictions[$relationId]; }
						break;
					}
				}
			}
			echo '<tr>';
			if($this->formObjectChanges[$field]['type']!='hidden') { echo '<td>'.$this->getLenguaje($field).'</td>'; }
			if ($flag == TRUE) // si la bandera de la relacion es verdadera, entonces cambia el campo de texto por un menu desplegable
			{
				$dataForCombo = new DB($tableLinked, $fieldLinked); // crea el esquema de la tabla relacionada
				
				$result = $dataForCombo->select($restrictionWhere, $label); // devuelve los registros
				echo '<td>'.$this->fillComboDB($result, $labelFieldLinked, $fieldLinked, str_replace('.', '_', $field), $dataForCombo->actualResults, $value).'</td>'; // crea el menu desplegable
			}
			else // si la bandera es falsa entonces dibuja el campo de texto.
			{
				$this->makeObjectForm($field, $attrs, $value);
			}
			if (is_array($this->formObjectLinks)) //agega los links
			{
				foreach ($this->formObjectLinks as $name=>$attrs)
				{
					if($attrs['object']==$field)
					{
						if($attrs['image']!=NULL) { $object = '<img src="'.$attrs['image'].'" alt="'.$name.'" border=0 />'; }
						else { $object = $name; }
						if($attrs['others']==NULL) { $popup = 'onclick="PopupCenter('."'".$attrs['link']."&change=true'".", '".str_replace('.', '_', $field)."', 770,550);".'" '; }
						else { $popup = $attrs['others']; }
						echo '<td><a href="#" '.$popup.'>'.$object.'</a></td>';
					}
				}
			}
			echo '</tr>';
		}
		echo '<tr><td colspan="2">';
		echo '<INPUT TYPE="hidden" NAME="save">';
		echo '<INPUT TYPE="submit" NAME="saveButton" VALUE="Guardar!" onclick="verify(this.form); return false;">';
		echo '</td></tr>';
		echo '</table>';
		echo '</form>';
	}
	function insertJavaForm()
	{
		include("db.jsForm.php");
		if(is_array($this->autocomplete)) { $this->autocompleteJs(); }
		if(is_array($this->checkIfExist)) { $this->checkIfExistJS(); }
	}
	function makeObjectForm($field, $attrs, $value=NULL)
	{
		if($this->formObjectChanges[$field]['enc']!=NULL) { $value=''; }
		if($this->formObjectChanges[$field]['type']!=NULL && $this->formObjectChanges[$field]['type']!="text")
		{
			if($this->formObjectChanges[$field]['type']=='textarea')
			{
				
			 	echo '<td><textarea  id="myTextarea" NAME="'.str_replace('.', '_', $field).'" '.$others.' cols="30">'.$value.'</textarea></td>';
					?>
					<script src="../js/jquery.elastic-1.2.js" type="text/javascript" charset="utf-8"></script>
					<script type="text/javascript">
						$(document).ready(function(){
							$('#myTextarea').elastic();
						});
					</script>
					<?
			}
			elseif($this->formObjectChanges[$field]['type']=='editor')
			{
				echo '<tr><td colspan="2">';
				include_once("../tools/fckeditor/fckeditor.php");
				$oFCKeditor = new FCKeditor(str_replace('.', '_', $field)) ;
				$oFCKeditor->BasePath = '/cms/admin/inc/tools/fckeditor/' ;
				$oFCKeditor->Value = $value ;
				$oFCKeditor->Create() ;
				echo '</tr></td>';
			}
			elseif($this->formObjectChanges[$field]['type']=='file')
			{
				global $filesPathDirectory;
				echo '<td><INPUT TYPE="file" NAME="'.str_replace('.', '_', $field).'" VALUE="" size="35" '.$others.'></td>';
				if($value!="") { echo '<td><a href="'.$filesPathDirectory.$value.'"><img src="../../images/download.png" align="absmiddle" border="0" /></a></td>'; }
			}
			elseif($this->formObjectChanges[$field]['type']!='menu' && $this->formObjectChanges[$field]['type']!='textarea') //si existe un cambio el cambio y no es un menu
			{
				if($this->formObjectChanges[$field]['type']=='password') { $inputType='password'; } //si existe un cambio en los objetos de formulario, lo realiza
				if($this->formObjectChanges[$field]['type']=='hidden') { $inputType='hidden'; }
				$others = $this->formObjectChanges[$field]['others'];
				if($this->addValuesFormObject[$field] != NULL) { $value = $this->addValuesFormObject[$field]; }
				echo '<td><INPUT TYPE="'.$inputType.'" NAME="'.str_replace('.', '_', $field).'" VALUE="'.$value.'" '.$others.'></td>'; //dibuja el campo de texto
			}
			else
			{
				echo '<td>'.$this->fillCombo($this->formObjectChanges[$field]['items'], str_replace('.', '_', $field), $value).'</td>'; // crea el menu desplegable
			}
		}
		else
		{
			if($this->formObjectChanges[$field]['type']!=NULL && $this->formObjectChanges[$field]['type']=="text") { $others = $this->formObjectChanges[$field]['others'];}
			if($attrs['len']>= 40) { $size = 40; }
			else { $size = $attrs['len']; }
			if($attrs['isNull']== "NO") { $isNull = 'ID="isNull"'; $warning='<img src="../../images/warning.png" align="absmiddle" />'; }
			else { $isNull = ''; $warning=''; }
			if($attrs['type']== "date") { $isDate = 'class="date-picker"'; }
			else  { $isDate = ''; }
			if(is_array($this->autocomplete))
			{
				if($this->autocomplete[str_replace('.', '_', $field)] != NULL)
				{
					$isNull = 'ID="'.str_replace('.', '_', $field).'"';
				}
			}
			if(is_array($this->checkIfExist))
			{
				if($this->checkIfExist[str_replace('.', '_', $field)] != NULL)
				{
					$isNull = 'ID="'.str_replace('.', '_', $field).'_chk"';
					$loading = '<span id="'.str_replace('.', '_', $field).'_loading" style="display:none"></span>';
				}
			}
			if($this->addValuesFormObject[$field] != NULL) { $value = $this->addValuesFormObject[$field]; }
			echo '<td><INPUT TYPE="text" NAME="'.str_replace('.', '_', $field).'" '.$isNull.' VALUE="'.$value.'" SIZE="'.$size.'" maxlength="'.$attrs['len'].'" '.$isDate.' '.$others.'>'.$warning.$loading.'</td>'; //dibuja el campo de texto
		}
	}
	function restriction($relation, $wheres)
	{
		$this->restrictions[$relation] = $wheres;
	}
	//funcion que llena, muestra y/o selecciona registros de la tabla relacionada en el formulario
	//string fillCombo(array resultado, string campoParaEtiqueta, string campoParaValor, string nombreDelCombo, array resultadoDeLaConeccion, string seleccionado)
	private function fillComboDB($data, $label, $value, $name, $result, $selected)
	{
		$combo = '<select ID="isNull" name="'.$name.'">';
		do //recorre el resultado y llena el combo
		{
			if ($selected == $data[$value]) { $isSelected = "SELECTED"; } // si el seleccionado es igual al valor entonces selecciona el item.
			else { $isSelected = ""; }
			$combo = $combo.'<option value="'.$data[$value].'" '.$isSelected.'>'.$data[$label].'</option>';
		} while ($data = pg_fetch_assoc($result));
		$combo = $combo.'</select>';
		return $combo;
	}
	//funcion que llena un menu desplegable...
	//string fillCombo(array resultado, string campoParaEtiqueta, string campoParaValor, string nombreDelCombo, string seleccionado)
	private function fillCombo($data, $name, $selected)
	{
		$combo = '<select name="'.$name.'">';
		foreach($data as $label=>$value)
		{
			if ($selected == $value) { $isSelected = "SELECTED"; } // si el seleccionado es igual al valor entonces selecciona el item.
			else { $isSelected = ""; }
			$combo = $combo.'<option value="'.$value.'" '.$isSelected.'>'.$label.'</option>';
		}
		$combo = $combo.'</select>';
		return $combo;
	}
	function insertCombo($data, $label, $value, $name, $selected, $others=NULL)
	{
		$combo = '<select name="'.$name.'" '.$others.' ID="isNull">';
		do //recorre el resultado y llena el combo
		{
			if ($selected == $data[$value]) { $isSelected = "SELECTED"; } // si el seleccionado es igual al valor entonces selecciona el item.
			else { $isSelected = ""; }
			$combo = $combo.'<option value="'.$data[$value].'" '.$isSelected.'>'.$data[$label].'</option>';
		} while ($data = pg_fetch_assoc($this->actualResults));
		$combo = $combo.'</select>';
		return $combo;
	}
	//funcion que inserta los datos del formulario
	//void insertData(boolean mostrarFormularioDespuesDeInsertar = TRUE)
	function insertData($showForm = FALSE)
	{
		$data = $_REQUEST; //obtiene la matriz de variables enviadas (post o get)
		if (isset($data['save'])) //si la matriz tiene elementos
		{
			$i = 0;
			foreach ($this->tableSchema as $field=>$attrs)
			{
				if($attrs['type']!="foo")
				{
					$simpleData = $data[str_replace('.', '_', $field)];
					if(($attrs['type']=='numeric' || $attrs['type']=='date') && $simpleData=='') { }
					elseif($this->formObjectChanges[$field]['type']=="file" && $_FILES[str_replace('.', '_', $field)]['name'] =='') {}
					else
					{
						if($this->formObjectChanges[$field]['type']=="file")
						{
							global $filesPathDirectory;
							if (is_uploaded_file($_FILES[str_replace('.', '_', $field)]['tmp_name'])) {
							  copy($_FILES[str_replace('.', '_', $field)]['tmp_name'], $filesPathDirectory.$_FILES[str_replace('.', '_', $field)]['name']);
							  $simpleData = $_FILES[str_replace('.', '_', $field)]['name'];
							  $upload = true;
							}
							if(!$upload) {
								echo "El archivo no cumple con las reglas establecidas";
							} 
						}
						if ($i == 0) { $comma = ""; }
						else { $comma = ", "; }
						if($this->formObjectChanges[$field]['enc']=='md5') { $simpleData = md5($simpleData); }
						if ($attrs['type']=='timestamp') { $attrs['type']='date'; }
						if ($attrs['type']=='text') { $attrs['type']='varchar'; }
						if ($attrs['type']=='varchar' || $attrs['type']=='date') { $dataWithType = "'".$simpleData."'"; }
						else { $dataWithType = $simpleData; }
						$datas = $datas.$comma.$dataWithType;
						$simpleField = explode(".", $field);
						if($simpleField[1] == "user" || $simpleField[1] == "order") $simpleField[1] = '"'.$simpleField[1].'"';
						$fields = $fields.$comma.$simpleField[1];
						$selectFields[$simpleField[1]] = $dataWithType;
						$i += 1;
					}
				}
			}
			$sql = 'INSERT INTO '.$this->tableName.'('.$fields.') VALUES('.$datas.')';
			$conn = $this->connection();
			$state = pg_query($conn, $sql);
			$flag = TRUE;
			//echo $sql;
			$select = new DB($this->tableName, $this->idField);
			$id = $select->select($selectFields, array($this->idField." DESC"));
			$this->lastId = $id[$this->idField];
		}
		if ($showForm or !isset($data['save']))
		{
			$this->showForm();
			$flag = FALSE;
		}
		else
		{
			if($state!=FALSE)
			{ 
			echo '<p align="center" style=" background:#FAFFCF url(../../images/ok.png) no-repeat 40px 7px;margin:40px auto; width:300px; height:25px; font-size:11px;  font-weight:bold; padding-top:10px; border:2px solid #0d6f1c; -moz-border-radius:5px; text-align:center;">Item Guardado Con exito!</p><br>';
			}
			else echo '<p align="center" style=" background:#FAFFCF url(../../images/delete_s.png) no-repeat 40px 7px;margin:40px auto; width:300px; height:25px; font-size:11px;  font-weight:bold; padding-top:10px; border:2px solid #CF1919; -moz-border-radius:5px; text-align:center;">Error al Modificar el item: <br>'.pg_last_error().'</p><br>';
		}
		return $flag;
	}
	//funcion que borra registros
	//void deleteData(array datos_a_borrar)
	function deleteData($data)
	{
		if (count($data) > 0)
		{
			if($this->tableSchema["$this->tableName.$this->idField"]['type']=="varchar")
			{
				foreach($data['checkbox'] as $value)
				{
					$newData[] = "'".$value."'";
				}
			}
			else { $newData = $data['checkbox']; }
			$inWhere = implode(",", $newData);
			if ($inWhere != "")
			{
				$sql = 'DELETE FROM '.$this->tableName.' WHERE '.$this->idField.' IN ('.$inWhere.')';
				$conn = $this->connection();
				if(pg_query($conn, $sql)) { return TRUE; }
				else { return FALSE; }
			}
		}
	}
	//funcion que modifica registros
	//void updateData(int numeroDeRegistro, boolean mostrarFormularioDespuesDeInsertar = TRUE)
	function updateData($id, $showForm = TRUE)
	{
		$data = $_REQUEST;
		if (isset($data['save']))
		{
			$i = 0;
			foreach ($this->tableSchema as $field=>$attrs)
			{
				if($attrs['type']!="foo")
				{
					$simpleData = $data[str_replace('.', '_', $field)];
					if($attrs['type']=='date' && $simpleData == ''){}
					elseif($this->formObjectChanges[$field]['type']=="file" && $_FILES[str_replace('.', '_', $field)]['name'] =='') {}
					else
					{
						if($this->formObjectChanges[$field]['type']=="file")
						{
							global $filesPathDirectory;
							if (is_uploaded_file($_FILES[str_replace('.', '_', $field)]['tmp_name'])) {
							  copy($_FILES[str_replace('.', '_', $field)]['tmp_name'], $filesPathDirectory.$_FILES[str_replace('.', '_', $field)]['name']);
							  $simpleData = $_FILES[str_replace('.', '_', $field)]['name'];
							  $upload = true;
							}
							if(!$upload) {
								echo "El archivo no cumple con las reglas establecidas";
							} 
						}
						if ($i == 0) { $comma = ""; }
						else { $comma = ", "; }
						if($this->formObjectChanges[$field]['enc']=='md5') { $simpleData = md5($simpleData); }
						if ($attrs['type']=='timestamp') { $attrs['type']='date'; }
						if ($attrs['type']=='text') { $attrs['type']='varchar'; }
						if ($attrs['type'] == 'varchar') { $dataWithType = "'".$simpleData."'"; }
						elseif ($attrs['type'] == 'date') { $dataWithType = "'".$simpleData."'"; }
						elseif($attrs['type']=='numeric' && $simpleData=='') { $dataWithType = 'null'; }
						else { $dataWithType = $simpleData; }
						$simpleField = explode(".", $field);
						if($simpleField[1] == "user" || $simpleField[1] == "order") $simpleField[1] = '"'.$simpleField[1].'"';
						$datas = $datas.$comma.$simpleField[1].'='.$dataWithType;
						$i += 1;
					}
				}
			}
			$sql = 'UPDATE '.$this->tableName.' SET '.$datas.' WHERE '.$this->idField.'='.$id;
			$conn = $this->connection();
			$state = pg_query($conn, $sql);
			$flag = TRUE;
			$this->lastId = $id;
			//echo $sql;
		}
		if ($showForm or !isset($data['save']))
		{
			$dataForForm = new DB($this->tableName, $this->idField);
			$select = $dataForForm->select(array($this->idField=>$id));
			$this->showForm($select);
			$flag = FALSE;
		}
		else
		{
			if($state!=FALSE){ echo '<p align="center" style="background:#FAFFCF url(../../images/ok.png) no-repeat 40px 7px;margin:40px auto; width:300px; height:25px; font-size:11px;  font-weight:bold; padding-top:10px; border:2px solid #0d6f1c; -moz-border-radius:5px; text-align:center;">Item Modificado Con exito!</p><br>';}
			else echo '<h1>Error al Modificar el item: <br>'.pg_last_error().'</h1><br>';
		}
		return $flag;
	}
	
	function addValueFormObject($object, $value)
	{
		$this->addValuesFormObject[$object] = $value;
	}
	//funcion que cambia un campo de texto en otro, y le agrega encriptacion-
	//void changeFormObject(string NombreDelObjetoDeFormulario, string nuevoTipo, string encriptacion=NULL, array items, string atributos de campo)
	function changeFormObject($object, $type, $enc=NULL, $items=NULL, $others=NULL)
	{
		$this->formObjectChanges[$object]['type'] = $type;
		$this->formObjectChanges[$object]['enc'] = $enc;
		$this->formObjectChanges[$object]['items'] = $items;
		$this->formObjectChanges[$object]['others'] = $others;
	}
	//funcion que coloca un link (que puede ser una imagen) al lado de un objeto de formulario
	//void insertLinkInFormObject(string objeto, string nombre, string link, string imagen=NULL)
	function insertLinkInFormObject($object, $name, $link, $image=NULL, $others=NULL)
	{
		$this->formObjectLinks[$name]['object'] = $object;
		$this->formObjectLinks[$name]['link'] = $link;
		$this->formObjectLinks[$name]['image'] = $image;
		$this->formObjectLinks[$name]['others'] = $others;
	}
	//funcion que inserta en los registros links (que puede ser una imagen) al lado de cada registro, con el valor del campo principal con el nombre de variable. ej link?nombre=campoprincipal
	//void insertLinkInShow(string nombre, string link, string imagen=NULL, string otros(onclick, etc)=NULL)
	function insertLinkInShow($name, $link, $image=NULL, $others=NULL, $title=NULL)
	{
		$this->linksInShow[$name]['link'] = $link;
		$this->linksInShow[$name]['image'] = $image;
		$this->linksInShow[$name]['others'] = $others;
		$this->linksInShow[$name]['title'] = $title;
	}
	function showControls($labels = TRUE, $align="center")
	{
		$this->controls['labels'] = $labels;
		$this->controls['align'] = $align;

		include("db.jsShow.php");
		echo '<form id="form_main" name='.$this->tableName.' method="post" action="" onSubmit="return false;" >'; //si es true construye objetos de formulario
		$this->drawControls();
	}
	function control($name, $link=NULL)
	{
		$i = count($this->controls['schema'])+1;
		$this->controls['schema'][$i]['control'] = $name;
		$this->controls['schema'][$i]['link'] = $link;
	}
	private function drawControls()
	{
		if(isset($_GET['selectMany'])) { $this->control("separator"); $this->control("use"); }
		echo '<table id="drawControls" align="'.$this->controls['align'].'"><tr>';
		foreach($this->controls['schema'] as $id=>$data)
		{
			$item = $data['control'];
			$link = $data['link'];
			if ($item != NULL)
			{
				echo '<td>';
				if ($item=='insert')
				{
					echo '<INPUT TYPE="image" src="../images/insert.png" NAME="insert" VALUE="Insertar" onclick="this.form.action='."'".$link."'".';this.form.submit();" />';
				}
				if ($item=='delete')
				{
					echo '<INPUT TYPE="image" src="../images/delete.png" VALUE="Borrar" onclick="isMarked(this.form, '."'".$link."'".', '."'delete'".');" />';
				}
				if ($item=='update')
				{
					echo '<INPUT TYPE="image" src="../images/update.png" VALUE="Modificar" onclick="isMarked(this.form, '."'".$link."'".', '."'update'".');" />';
				}
				if ($item=='use')
				{
					echo '<INPUT TYPE="image" src="../images/ok.png" VALUE="Usar" onclick="selectMany(this.form);" />';
				}
				if ($item=='back')
				{
					echo '<INPUT TYPE="image" src="../images/back.png" NAME="back" VALUE="Atras" onclick="this.form.action='."'".$link."'".';this.form.submit();" />';
				}
				if ($item=='refresh')
				{
					echo '<INPUT TYPE="image" src="../images/refresh.png" NAME="refresh" VALUE="recargar" onclick="window.location.reload();" />';
				}
				if ($item=='selectAll')
				{
					echo '<input type="image" src="../images/selectAll.png" name="selectAll" value="Todos!" onclick="mark(1,this.form); return false;" />';
				}
				if ($item=='selectNone')
				{
					echo '<input type="image" src="../images/selectNone.png" name="selectNone" value="Ninguno!" onclick="mark(0,this.form); return false;" />';
				}
				if ($item=='selectInvert')
				{
					echo '<input type="image" src="../images/selectInvert.png" name="selectInvert" value="Invertido" onclick="mark(-1,this.form); return false;" />';
				}
				if ($item=='separator')
				{
					echo '<img src="../images/separator.png" />';
				}
				if ($item=='save')
				{
					echo '<INPUT TYPE="image" src="../images/save.png" NAME="save" VALUE="Guardar!" />';
				}
				if ($item=='print')
				{
					echo '<INPUT TYPE="image" src="../images/print.png" VALUE="Imprimir" onclick="this.form.action='."'".$link."'".';this.form.submit();" />';
				}
				if ($item=='cheque')
				{
					echo '<INPUT TYPE="image" src="../images/cheque.png" VALUE="Cheques" onclick="this.form.action='."'".$link."'".';this.form.submit();" />';
				}
				if ($item=='detail')
				{
					echo '<INPUT TYPE="image" src="../images/product_big.png" VALUE="Detalle" onclick="this.form.action='."'".$link."'".';this.form.submit();" />';
				}
				if ($item=='guias')
				{
					echo '<INPUT TYPE="image" src="../images/assign.png" VALUE="Guias" onclick="PopupCenter('."'../../".$link."&selectMany=".str_replace("&", "*",$_SERVER['REQUEST_URI'])."', 'Guias', 770, 500);".'" />';
				}
				if ($item=='credito')
				{
					echo '<INPUT TYPE="image" src="../images/assign.png" VALUE="credito" onclick="PopupCenter('."'../../".$link."&selectMany=".str_replace("&", "*",$_SERVER['REQUEST_URI'])."', 'Credito', 770, 500);".'" />';
				}
				if ($item=='cash')
				{
					echo '<INPUT TYPE="image" src="../images/cash.png" VALUE="Efectivo" onclick="this.form.action='."'".$link."'".';this.form.submit();" />';
				}
				if ($item=='dicom')
				{
					echo '<INPUT TYPE="image" src="../images/dicom.png" VALUE="Dicom" onclick="isMarked(this.form, '."'".$link."'".', '."'delete'".');" />';
				}
				if ($item=='png')
				{
					echo '<INPUT TYPE="image" src="../images/pngFull.png" VALUE="Png Full" onclick="this.form.action='."'".$link."'".';this.form.submit();" />';
				}
				if ($item=='resize')
				{
					echo '<INPUT TYPE="image" src="../images/png.png" VALUE="Png Redimensionado" onclick="this.form.action='."'".$link."'".';this.form.submit();" />';
				}
				echo '</td>';
			}
		}
		if($this->controls['labels'])
		{
			echo '</tr><tr>';
			foreach($this->controls['schema'] as $id=>$data)
			{
				$item = $data['control'];
				$link = $data['link'];
				if ($item != NULL)
				{
					echo '<td>';
					if ($item=='insert')
					{
						echo 'Insertar';
					}
					if ($item=='delete')
					{
						echo 'Eliminar';
					}
					if ($item=='update')
					{
						echo 'Modificar';
					}
					if ($item=='use')
					{
						echo 'Usar';
					}
					if ($item=='back')
					{
						echo 'Atras';
					}
					if ($item=='refresh')
					{
						echo 'Recargar';
					}
					if ($item=='selectAll')
					{
						echo 'Todos!';
					}
					if ($item=='selectNone')
					{
						echo 'Ninguno!';
					}
					if ($item=='selectInvert')
					{
						echo 'Invertido!';
					}
					if ($item=='separator')
					{
						echo '';
					}
					if ($item=='save')
					{
						echo 'Guardar!';
					}
					if ($item=='print')
					{
						echo 'Imprimir';
					}
					if ($item=='cheque')
					{
						echo 'Cheques';
					}
					if ($item=='detail')
					{
						echo 'Detalle';
					}
					if ($item=='guias')
					{
						echo 'Guias';
					}
					if ($item=='credito')
					{
						echo 'Credito';
					}
					if ($item=='cash')
					{
						echo 'Efectivo';
					}
					if ($item=='dicom')
					{
						echo 'Dicom';
					}
					if ($item=='png')
					{
						echo 'Png Full';
					}
					if ($item=='resize')
					{
						echo 'Png Redi.';
					}
					echo '</td>';
				}
			}		
		}
		echo '</tr></table>';
	}

	function insertLinkfoot($name, $link, $image=NULL, $others=NULL){
		echo "<tr><td><img src=$image><a href=$link>$name</a></td>";
	
	}
	private function autocompleteJs()
	{
		echo '
		<script>
		function findValue(li) {
			if( li == null ) return alert("No match!");
			if( !!li.extra ) var sValue = li.extra[0];
			else var sValue = li.selectValue;

			//alert("The value you selected was: " + sValue);
		}

		function selectItem(li) {
			findValue(li);';
		foreach($this->autocomplete as $object=>$attrs)
		{
			$exps = explode(",", $attrs['values']);
			foreach($exps as $exp)
			{
				$obj = explode("->", $exp);
				$val[] = $obj[0];
			}
			$i = -1;
			foreach ($val as $v)
			{
				if($v!=NULL and $i!=-1)
				{
					echo "\n".'			document.'.$v.'.value = li.extra['.$i.'];';
				}
				$i++;
			}
		}
		echo '
		}

		function formatItem(row) {';
		foreach($this->autocomplete as $object=>$attrs)
		{
			$i = 0;
			$exps = explode(",", $attrs['values']);
			foreach($exps as $exp)
			{
				$obj = explode("->", $exp);
				$val[] = $obj[0];
				$format = $format.'" - "+row['.$i.']+';
				$i++;
			}
			echo "\n".'			return '.$format.'"!";';
		}
		echo '
		}

		function lookupAjax(){';
		foreach($this->autocomplete as $object=>$attrs)
		{
			echo "\n".'			var oSuggest = $("#'.$object.'")[0].autocompleter;';
		}
		echo '
			oSuggest.findValue();
			return false;
		}

		$(document).ready(function() {';
		foreach($this->autocomplete as $object=>$attrs)
		{
			echo'
			$("#'.$object.'").autocomplete(
				"../js/autocomplete/autocomplete.php?table='.$attrs["table"].'&values='.$attrs["values"].'",
				{
					delay:10,
					minChars:2,
					matchSubset:1,
					matchContains:1,
					cacheLength:10,
					onItemSelect:selectItem,
					onFindValue:findValue,
					formatItem:formatItem,
					autoFill:true
				}
			);';
		}
		echo'
		});
		</script>';
	}
	function autocomplete($object, $table, $valuesField)
	{
		$this->autocomplete[$object]['table'] = $table;
		$this->autocomplete[$object]['values'] = $valuesField;
	}
	function checkIfExistJS()
	{
		foreach($this->checkIfExist as $object=>$attrs)
		{
			echo '
		<script>
		$(document).ready(function()
		{
			$("#'.$object.'_chk").blur(function()
			{
			 $("#'.$object.'_loading").removeClass().addClass('."'messagebox'".').text("Verificando").fadeIn("slow");
			 $.post("../js/check/check.php",{ value:$(this).val(), table:"'.$attrs['table'].'", field:"'.$attrs['field'].'", rest:"'.$attrs['restrictions'].'" } ,function(data)
			 {
			  if(data==0)
			  {
			   $("#'.$object.'_loading").fadeTo(200,0.1,function()
			   {
			    $(this).html("Duplicado").addClass('."'messageboxerror'".').fadeTo(900,1);
			   });
			  }
			  else
			  {
			   $("#'.$object.'_loading").fadeTo(200,0.1,function()
			   {
			    $(this).html("Ok!!").addClass('."'messageboxok'".').fadeTo(900,1);
			   });
			  }
			 });
			});
		});
		</script>';
		}

	}
	// void funcion checkItemIfExist($object as string, $table as string, $field as string, $restrictions as array = NULL)
	function checkItemIfExist($object, $table, $field, $restrictions = NULL)
	{
		$this->checkIfExist[$object]['table'] = $table;
		$this->checkIfExist[$object]['field'] = $field;
		$this->checkIfExist[$object]['restrictions'] = $restrictions;
	}
	// array function doSql($sql as string)
	function doSql($sql)
	{
		$conn = $this->connection();
		$this->actualSql = $sql;
		$this->actualResults = pg_query($conn, $sql);
		return pg_fetch_assoc($this->actualResults);
	}
	function changeItemInShowIf($field, $logic, $compare, $objectToChange, $attrib)
	{
		$i = count($this->showObjectChange[$field])+1;
		$this->showObjectChange[$field][$i]['logic']=$logic;
		$this->showObjectChange[$field][$i]['compare']=$compare;
		$this->showObjectChange[$field][$i]['object']=$objectToChange;
		$this->showObjectChange[$field][$i]['attrib']=$attrib;
	}
}
?>
